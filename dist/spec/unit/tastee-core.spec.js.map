{"version":3,"sources":["spec/unit/tastee-core.spec.ts"],"names":[],"mappings":";AAAA,uCAAuC;;AAGvC,uDAAiD;AAEjD,8BAA8B;AAE9B,QAAQ,CAAC,aAAa,EAAE;IACpB,IAAI,IAAe,CAAC;IACpB,IAAI,cAAc,CAAC;IACnB,IAAI,YAAY,CAAC;IACjB,IAAI,YAAY,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;IAE5B,UAAU,CAAC;QACP,cAAc,GAAG,OAAO,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC,eAAe,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC,CAAC;QAC7G,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;QACzE,IAAI,GAAG,IAAI,wBAAU,CAAC,cAAc,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE;QAC5B,IAAI,YAAY,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;QAC5B,IAAI,QAAQ,GAAG,YAAY,CAAC;QAE5B,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QAE3C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE;QAC1B,IAAI,QAAQ,GAAG,YAAY,CAAC;QAE5B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE;QACvB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE;QACvB,IAAI,CAAC,IAAI,EAAE,CAAC;QAEZ,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QACxC,IAAI,UAAU,GAAG,cAAc,CAAC;QAChC,IAAI,cAAc,GAAG,EAAE,CAAC;QAExB,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAE9D,IAAI,CAAC,OAAO,CAAC,UAAU,EAAC,kBAAkB,CAAC,CAAC;QAE5C,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,CAAC,OAAO,EAAC,OAAO,CAAC,CAAC,CAAC;QAC9E,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,cAAc,EAAC,kBAAkB,CAAC,CAAC;IACzF,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","file":"tastee-core.spec.js","sourcesContent":["/* tslint:disable:no-unused-variable */\n\nimport {TasteeEngine} from \"../../app/tastee-engine\";\nimport {TasteeCore} from \"../../app/tastee-core\";\n\n////////  SPECS  /////////////\n\ndescribe('Tastee Core', function () {\n    let core:TasteeCore;\n    let tasteeAnalyser;\n    let tasteeEngine;\n    let someCallback = () => {};\n\n    beforeEach(function () {\n        tasteeAnalyser = jasmine.createSpyObj(\"TasteeAnalyser\", [\"addPluginFile\", \"addParamFile\", \"toSeleniumCode\"]);\n        tasteeEngine = jasmine.createSpyObj(\"TasteeEngine\", [\"stop\", \"execute\"]);\n        core = new TasteeCore(tasteeAnalyser);\n        core.init(tasteeEngine);\n    });\n\n    it(\" can add more plugin file\", function () {\n        let someCallback = () => {};\n        let filePath = '/some/path';\n\n        core.addPluginFile(filePath, someCallback);\n\n        expect(core.analyser.addPluginFile).toHaveBeenCalledWith(filePath, someCallback);\n    });\n\n    it(\" can add parameter file\", function () {\n        let filePath = '/some/path';\n\n        core.addParamFile(filePath);\n\n        expect(core.analyser.addParamFile).toHaveBeenCalledWith(filePath);\n    });\n\n    it(\" can init the engine\", function () {\n        expect(core.engine).toEqual(tasteeEngine);\n    });\n\n    it(\" can stop the engine\", function () {\n        core.stop();\n\n        expect(core.engine.stop).toHaveBeenCalled();\n    });\n\n    it(\" translate tastee code and execute it\", function () {\n        let tasteeCode = \"line1\\nline2\";\n        let executableCode = [];\n\n        tasteeAnalyser.toSeleniumCode.and.returnValue(executableCode);\n\n        core.execute(tasteeCode,\"nameOfTasteeFile\");\n\n        expect(tasteeAnalyser.toSeleniumCode).toHaveBeenCalledWith([\"line1\",\"line2\"]);\n        expect(tasteeEngine.execute).toHaveBeenCalledWith(executableCode,\"nameOfTasteeFile\");\n    });\n\n});\n"]}