{"version":3,"sources":["app/tastee-analyser.ts"],"names":[],"mappings":"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","file":"tastee-analyser.js","sourcesContent":["import * as fs from 'fs';\nimport {TasteeCode,TasteeCodeMatcher} from \"./tastee-code\";\nimport {Instruction} from \"./instruction\";\n\n\ndeclare var propertiesReader: any;\nvar propertiesReader = require('properties-reader');\nconst yaml = require('js-yaml');\n\nexport class TasteeAnalyser {\n\n    tasteeCodes:TasteeCode[];\n    properties:any;\n\n    constructor(){\n        this.init();\n    }\n\n    init() : void{\n        this.tasteeCodes = [];\n        this.properties = propertiesReader();\n    }\n\n    addPluginFile(filePath : string, callback: any) :void {\n        var data = yaml.safeLoad(fs.readFileSync(filePath, 'utf8'));\n        this.extractTasteeCode(data);\n        if (callback) {\n            return callback();\n        }\n    }\n\n    toSeleniumCode(tasteeLinesArray : string[]) : Instruction[] {\n        let seleniumCodeLines:string[];\n        let instructions = [];\n        for (var i = 0; i < tasteeLinesArray.length; i++) {\n            var line = this._convertParamToValue(tasteeLinesArray[i].trim());\n            seleniumCodeLines = TasteeCodeMatcher.getSeleniumCodeFrom(line, this.tasteeCodes);            \n            instructions.push(new Instruction(i, line, seleniumCodeLines !== undefined ? seleniumCodeLines.join('\\n') : ''));\n        }\n        return instructions;\n    }\n\n    addParamFile(filePath) : void {\n        this.properties.append(filePath);\n    }\n\n    setParam(key : string, value : string){\n        this.properties.set(key, value);\n    }\n\n    extractTasteeCode(data : any) : void {        \n        let current : TasteeCode;\n        for(let key of Object.keys(data)){\n            let tasteeCode = new TasteeCode(key);\n            for(let instruction of data[key]){\n                tasteeCode.addCodeLines(TasteeCodeMatcher.getSeleniumCodeFrom(instruction, this.tasteeCodes))\n            }\n            this.tasteeCodes.push(tasteeCode);     \n        }\n        //once done review lines inside tasteeCode\n        this._reviewInnerTasteeCode(0);\n    }\n\n    private _convertParamToValue(tasteeLine) : string {\n        this.properties.each((key, value) => {\n            tasteeLine = tasteeLine.split(key).join(\"'\"+value+\"'\");\n        });\n        return tasteeLine;\n    }\n\n    private _reviewInnerTasteeCode(reviewNumber) : void {\n        let hasChanged = false;\n        let newLines : string[];\n\n        if(reviewNumber < 10) {\n            for (let tasteeCode of this.tasteeCodes) {\n                newLines = [];\n                for (let line of tasteeCode.codeLines) {\n                    let seleniumLines = TasteeCodeMatcher.getSeleniumCodeFrom(line, this.tasteeCodes);\n\n                    newLines = newLines.concat(seleniumLines);\n\n                    if(line != seleniumLines[0]){\n                        hasChanged = true;\n                    }\n                }\n                tasteeCode.codeLines = newLines;\n            }\n            if(hasChanged){\n                this._reviewInnerTasteeCode(++reviewNumber);\n            }\n        }\n    }\n}\n\n"]}