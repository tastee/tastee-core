{"version":3,"sources":["app/tastee-core.ts"],"names":[],"mappings":";;AAIA;IAOI,YAAY,QAAwB;QAF5B,uBAAkB,GAAG,KAAK,CAAC;QAG/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,IAAI,CAAC,MAAoB;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACnC,CAAC;IAED,aAAa,CAAC,QAAgB,EAAE,WAAwB;QACpD,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACvD,CAAC;IAED,YAAY,CAAC,QAAgB;QACzB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED,IAAI;QACA,EAAE,CAAA,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACnB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QACpC,CAAC;IACL,CAAC;IAED,OAAO,CAAC,UAAkB,EAAE,cAAuB;QAC/C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,cAAc,CAAC,CAAC;IACrE,CAAC;IAED,YAAY,CAAC,UAAoB,EAAE,cAAuB;QACtD,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACvD,CAAC;CACJ;AAxCD,gCAwCC","file":"tastee-core.js","sourcesContent":["import { Instruction } from './instruction';\nimport { TasteeEngine } from './tastee-engine';\nimport { TasteeAnalyser } from './tastee-analyser';\n\nexport class TasteeCore {\n\n    analyser: TasteeAnalyser;\n    engine: TasteeEngine;\n\n    private _engineInitialized = false;\n\n    constructor(analyser: TasteeAnalyser) {\n        this.analyser = analyser;\n    }\n\n    init(engine: TasteeEngine): void {\n        this.engine = engine;\n        this.analyser.init();\n        this._engineInitialized = true;\n    }\n\n    addPluginFile(filePath: string, onFileAdded?: () => void): void {\n        this.analyser.addPluginFile(filePath, onFileAdded);\n    }\n\n    addParamFile(filePath: string): void {\n        this.analyser.addParamFile(filePath);\n    }\n\n    stop(): void {\n        if(this._engineInitialized){\n            this.engine.stop();\n            this._engineInitialized = false;\n        }\n    }\n\n    execute(tasteeCode: string, tasteeFileName?: string): Promise<Instruction[]> {\n        return this.executeLines(tasteeCode.split('\\n'), tasteeFileName);\n    }\n\n    executeLines(tasteeCode: string[], tasteeFileName?: string): Promise<Instruction[]> {\n        var jsCode = this.analyser.toJsCode(tasteeCode);\n        return this.engine.execute(jsCode, tasteeFileName);\n    }\n}\n\n"]}