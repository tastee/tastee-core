{"version":3,"sources":["app/tastee-code.ts"],"names":[],"mappings":";;AAEA;IAMI,YAAY,UAAkB;QAC1B,IAAI,CAAC,yBAAyB,GAAG,UAAU,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC9C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEpB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,YAAY,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;SACzH;aAAM;YACH,IAAI,CAAC,YAAY,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;SACpD;IACL,CAAC;IAED,YAAY,CAAC,SAAmB;QAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACtD,CAAC;IAED,mBAAmB,CAAC,aAAuB;QACvC,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE;YAC7B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC;SACzE;QACD,OAAO,YAAY,CAAC;IACxB,CAAC;IAEO,wBAAwB,CAAC,QAAgB,EAAE,YAAsB;QACrE,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,SAAS,EAAE,CAAC;gBAC1C,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;SACN;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;CAEJ;AAvCD,gCAuCC;AAED;IAII,YAAoB,UAAuB,EAAE,aAAuB;QAChE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC;IAEO,mBAAmB;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACnE,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,UAAmB,EAAE,WAA0B;QACtE,IAAI,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACpE,IAAI,iBAAiB,EAAE;YACnB,OAAO,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;SAClD;QACD,OAAO,CAAC,UAAU,CAAC,CAAC;IACxB,CAAC;IAEO,MAAM,CAAC,aAAa,CAAC,UAAU,EAAG,WAA0B;QAChE,KAAK,IAAI,UAAU,IAAI,WAAW,EAAE;YAChC,IAAI,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,CAAA;YAC1D,IAAI,UAAU,EAAE;gBACZ,OAAO,IAAI,iBAAiB,CAAC,UAAU,EAAC,UAAU,CAAC,CAAA;aACtD;SACJ;QACD,OAAO;IACX,CAAC;CAEJ;AA/BD,8CA+BC","file":"tastee-code.js","sourcesContent":["import * as util from 'util';\n\nexport class TasteeCode {\n    instructionWithParameters: string;\n    parameters: string[];\n    regexMatcher: RegExp;\n    codeLines: string[];\n\n    constructor(tasteeLine: string) {\n        this.instructionWithParameters = tasteeLine;\n        this.parameters = tasteeLine.match(/\\$\\w*/gi);\n        this.codeLines = [];\n        \n        if (this.parameters) {\n            this.regexMatcher = new RegExp(\"^\" + tasteeLine.replace(new RegExp(\"\\\\\" + this.parameters.join(\"|\\\\\"), \"g\"), \"(.*)\"));\n        } else {\n            this.regexMatcher = new RegExp(\"^\" + tasteeLine);\n        }\n    }\n\n    addCodeLines(codeLines: string[]) {\n        this.codeLines = this.codeLines.concat(codeLines);\n    }\n\n    toSeleniumCodeLines(matchingArray: string[]): string[] {\n        var seleniumCode = [];\n        for (let line of this.codeLines) {\n            seleniumCode.push(this._replaceTasteeParameters(line, matchingArray));\n        }\n        return seleniumCode;\n    }\n\n    private _replaceTasteeParameters(codeLine: string, matcherArray: string[]): string {\n        if (this.parameters) {\n            this.parameters.forEach(function (parameter, i) {\n                codeLine = codeLine.split(parameter).join(matcherArray[i + 1]);\n            });\n        }\n        return codeLine;\n    }\n\n}\n\nexport class TasteeCodeMatcher{\n    tasteeCode : TasteeCode;\n    matchingArray : string[];\n\n    private constructor(tasteeCode : TasteeCode, matchingArray: string[]){\n        this.tasteeCode = tasteeCode;\n        this.matchingArray = matchingArray;\n    }\n\n    private toSeleniumCodeLines() : string[] {\n        return this.tasteeCode.toSeleniumCodeLines(this.matchingArray);\n    }\n\n    static getSeleniumCodeFrom(tasteeLine : string, tasteeCodes : TasteeCode[]) : string[] {\n        let tasteeCodeMatcher = this._isTasteeCode(tasteeLine, tasteeCodes);\n        if (tasteeCodeMatcher) {\n            return tasteeCodeMatcher.toSeleniumCodeLines();\n        }\n        return [tasteeLine];\n    }\n\n    private static _isTasteeCode(tasteeLine , tasteeCodes : TasteeCode[]) : TasteeCodeMatcher {\n        for (let tasteeCode of tasteeCodes) {\n            var isMatching = tasteeLine.match(tasteeCode.regexMatcher)\n            if (isMatching) {\n                return new TasteeCodeMatcher(tasteeCode,isMatching)\n            }\n        }\n        return;\n    }\n\n}"]}