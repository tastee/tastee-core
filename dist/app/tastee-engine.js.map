{"version":3,"sources":["app/tastee-engine.ts"],"names":[],"mappings":"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","file":"tastee-engine.js","sourcesContent":["import { Instruction } from \"./instruction\";\nimport { TasteeReporter } from \"./tastee-reporter\";\n\ndeclare var assert: any;\nvar assert = require('assert');\n\nexport class TasteeEngine {\n\n    webdriver = require('selenium-webdriver');\n    reporter: TasteeReporter;\n\n    driver: any;\n    screenShotPath: string;\n\n    constructor(browser: any, path: string) {\n        if (browser) {\n            if (browser == 'phantomjs') {\n                var phantomjs_exe = require('phantomjs-prebuilt').path;\n                var customPhantom = this.webdriver.Capabilities.phantomjs();\n                customPhantom.set(\"phantomjs.binary.path\", phantomjs_exe);\n                // Build custom phantomJS driver\n                this.driver = new this.webdriver.Builder().withCapabilities(customPhantom).build();\n            } else {\n                // Fix : The diver executable could not be found on the current PATH\n                require('geckodriver');\n                require('chromedriver');\n                this.driver = new this.webdriver.Builder().forBrowser(browser).build();\n            }\n        }\n        this.screenShotPath = path;\n        this.reporter = new TasteeReporter();\n    }\n\n    stop(): void {\n        this.driver.quit();\n    }\n\n    async execute(codeToExecute: Instruction[], tasteeFileName: string): Promise<Instruction[]> {\n        var By = this.webdriver.By;\n        var Key = this.webdriver.Key;\n        var until = this.webdriver.until;\n        var Actions = this.webdriver.Actions;\n        let screenShotPath = this.screenShotPath;\n        let driver = this.driver;\n        let reporter = this.reporter;\n        for (var idx = 0; idx < codeToExecute.length; idx++) {\n            try {\n                await eval(codeToExecute[idx].command);\n                await codeToExecute[idx].setValid(true);\n                await reporter.takeScreenShot(driver, screenShotPath, tasteeFileName, codeToExecute[idx]);\n            } catch (error) {\n                console.log(error);\n                await codeToExecute[idx].setValid(false);\n                await codeToExecute[idx].setErrorMessage(error.message);\n                await reporter.takeScreenShot(driver, screenShotPath, tasteeFileName, codeToExecute[idx]);\n            }\n        }\n        return codeToExecute;\n    }\n\n}\n\n"]}