{"version":3,"sources":["app/tastee-engine.ts"],"names":[],"mappings":";;;;;;;;;;AACA,uDAAmD;AAEnD,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAE/B;IASI,YAAY,eAAwB,KAAK;QAPzC,cAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;QAKjC,aAAQ,GAAG,KAAK,CAAC;QAGb,IAAI,CAAC,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC;IACjC,CAAC;IAED,IAAI;QAAU,CAAC,GAAS,EAAE;YACtB,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAC/B,CAAC,CAAA,CAAC,EAAE,CAAC;IACL,CAAC;IAEK,OAAO,CAAC,aAA4B,EAAE,cAAsB;;YAC9D,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;gBACX,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAC,CAAC,CAAC;gBACtE,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC7C,CAAC;YACD,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACrB,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAC3B,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC7B,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;gBAClD,IAAI,CAAC;oBACD,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;oBACvC,MAAM,aAAa,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC5C,CAAC;gBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACnB,MAAM,aAAa,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBACzC,MAAM,aAAa,CAAC,GAAG,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC5D,CAAC;YACL,CAAC;YACD,MAAM,CAAC,aAAa,CAAC;QACzB,CAAC;KAAA;CAEJ;AAxCD,oCAwCC","file":"tastee-engine.js","sourcesContent":["import { Instruction } from './instruction';\nimport { TasteeReporter } from './tastee-reporter';\ndeclare var assert: any;\nvar assert = require('assert');\n\nexport class TasteeEngine {\n\n    puppeteer = require('puppeteer');\n    reporter: TasteeReporter;\n\n    page: any;\n    browser: any;\n    headless = false;\n\n    constructor(headlessMode: boolean = false) {\n        this.reporter = new TasteeReporter();\n        this.headless = headlessMode;\n    }\n\n    stop(): void {(async () => {\n        await this.browser.close();\n    })();\n    }\n\n    async execute(codeToExecute: Instruction[], tasteeFileName: string): Promise<Instruction[]> {\n        if(!this.page){\n            this.browser = await this.puppeteer.launch({headless: this.headless});\n            this.page = await this.browser.newPage();\n        }\n        var page = this.page;\n        var browser = this.browser;\n        let reporter = this.reporter;\n        for (var idx = 0; idx < codeToExecute.length; idx++) {\n            try {\n                await eval(codeToExecute[idx].command);\n                await codeToExecute[idx].setValid(true);\n            } catch (error) {\n                console.log(error);\n                await codeToExecute[idx].setValid(false);\n                await codeToExecute[idx].setErrorMessage(error.message);\n            }\n        }\n        return codeToExecute;\n    }\n\n}\n\n"]}